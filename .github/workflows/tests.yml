name: Tests

# Workflow for iOS tests
on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  test:
    name: Build and Test
    runs-on: macos-latest
    
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CI: 1
      # Plugin handling environment variables
      IDESkipPackagePluginFingerprintValidation: YES
      IDESkipMacroFingerprintValidation: YES
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Tuist with Mise
      uses: jdx/mise-action@v2
      
    - name: Configure Xcode for Plugin Trust
      run: |
        # Create Xcode preferences directory if it doesn't exist
        mkdir -p ~/Library/Preferences
        # Set global Xcode preferences to skip plugin validation
        defaults write com.apple.dt.Xcode IDESkipPackagePluginFingerprintValidation -bool YES
        defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES
        defaults write com.apple.dt.Xcode IDEDisablePackageRepositoryFileSystemMonitoring -bool YES
        # Also set for command line tools
        defaults write com.apple.dt.CommandLineTools IDESkipPackagePluginFingerprintValidation -bool YES
        
    - name: Generate Xcode project with Plugin Trust
      working-directory: TarotApp
      env:
        IDESkipPackagePluginFingerprintValidation: "YES"
        IDESkipMacroFingerprintValidation: "YES"
      run: |
        tuist generate
        
    - name: List project structure (for debugging)
      working-directory: TarotApp
      run: |
        pwd
        ls -la
        echo "Checking for generated workspace..."
        ls -la *.xcworkspace
        
    - name: List available schemes
      working-directory: TarotApp
      run: |
        xcodebuild -list -workspace Lunalit.xcworkspace
        
    - name: List and Select Simulator
      run: |
        xcrun simctl list devices available --json | \
          jq '.devices | to_entries[] | select(.key | startswith("iOS")) | .value[] | select(.isAvailable == true) | .name' | \
          head -5
        # Use a specific simulator
        SIMULATOR=$(xcrun simctl list devices available --json | \
          jq -r '.devices | to_entries[] | select(.key | startswith("iOS")) | .value[] | select(.isAvailable == true and (.name | contains("iPhone"))) | .name' | \
          head -1)
        echo "Selected simulator: $SIMULATOR"
        echo "SIMULATOR_NAME=$SIMULATOR" >> $GITHUB_ENV
        
    - name: Build App
      working-directory: TarotApp
      run: |
        tuist build Lunalit \
          --device "${{ env.SIMULATOR_NAME }}" \
          -- -IDESkipPackagePluginFingerprintValidation=YES
        
    - name: Run Tests
      working-directory: TarotApp
      run: |
        tuist test LunalitTests -- -IDESkipPackagePluginFingerprintValidation=YES -IDESkipMacroFingerprintValidation=YES